import "dotenv/config";
import express from "express";
import bodyParser from "body-parser";
import crypto from "crypto";
import { Client, GatewayIntentBits, EmbedBuilder, Events } from "discord.js";

const {
  PORT = 8080,
  DISCORD_TOKEN,
  CHANNEL_ID,
  EULER_WEBHOOK_SECRET,
} = process.env;

if (!DISCORD_TOKEN || !CHANNEL_ID) {
  console.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà DISCORD_TOKEN ‡πÅ‡∏•‡∏∞ CHANNEL_ID ‡πÉ‡∏ô .env");
  process.exit(1);
}

/* ---------- Discord client ---------- */
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once(Events.ClientReady, (c) => {
  console.log(`‚úÖ Discord bot online as ${c.user.tag}`);
});

await client.login(DISCORD_TOKEN);

/* ---------- Express app ---------- */
const app = express();

// ‡πÄ‡∏Å‡πá‡∏ö raw body ‡πÄ‡∏û‡∏∑‡πà‡∏≠ verify signature ‡πÑ‡∏î‡πâ
app.use(
  bodyParser.json({
    verify: (req, res, buf) => {
      req.rawBody = buf;
    },
  })
);

/* ---------- ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ ---------- */
function verifyEulerSignature(req) {
  const sigHeader = req.get("x-euler-signature");
  if (!sigHeader) return false;

  return sigHeader.trim() === EULER_WEBHOOK_SECRET;
}

const clamp = (s, max) => (s ?? "").toString().slice(0, max);

/* ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---------- */
function buildStartEmbed(u, info = {}) {
  const title = clamp(info.title || `@${u} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏•‡∏ü‡πå‡∏ô‡πâ‡∏≤~`, 256);
  const cover = info.cover || info.thumbnail || info.image;
  const startAt = info.started_at
    ? Math.floor(new Date(info.started_at).getTime() / 1000)
    : Math.floor(Date.now() / 1000);

  const e = new EmbedBuilder()
    .setColor(0xffb6c1)
    .setTitle(`‚úø üî¥ LIVE: ${title} ‚úø`)
    .setURL(`https://www.tiktok.com/@${u}/live`)
    .setDescription(
      `‡πÄ‡∏°‡∏µ‡πâ‡∏¢‡∏ß~ **@${u}** ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤ üêæ\n‡∏°‡∏≤‡πÄ‡∏°‡πâ‡∏≤‡∏°‡∏≠‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢~\n\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠: <t:${startAt}:R>`
    )
    .setTimestamp();

  if (cover && /^https?:\/\//i.test(cover)) e.setImage(cover);
  return e;
}

function buildEndEmbed(u, info = {}) {
  const mins = info.duration_minutes ?? info.minutes ?? null;
  let desc = `‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏Ç‡∏≠‡∏á **@${u}** ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏µ‡πâ‡∏¢‡∏ß~`;
  if (mins != null) desc += `\n‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏•‡∏ü‡πå: **${mins} ‡∏ô‡∏≤‡∏ó‡∏µ** ‚è±Ô∏è`;
  desc += `\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö`;

  return new EmbedBuilder()
    .setColor(0x99aab5)
    .setTitle("‚úø ‚ö´Ô∏è ‡πÑ‡∏•‡∏ü‡πå‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úø")
    .setDescription(desc)
    .setTimestamp();
}

async function sendToDiscord(payload) {
  const ch = await client.channels.fetch(CHANNEL_ID).catch(() => null);
  if (!ch?.isTextBased?.()) {
    console.error("‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: CHANNEL_ID ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text channel");
    return;
  }

  const username = (
    payload.username ||
    payload.user ||
    payload.account ||
    ""
  ).replace(/^@/, "");
  const kind = (payload.event || payload.type || "").toLowerCase();

  // room/live info ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Euler (‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô)
  const info = payload.roomInfo || payload.live || payload.data || {};

  if (kind.includes("start")) {
    await ch.send({
      content: `üîî **@${username}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á LIVE ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≤‡∏≤‡∏≤~ üò∫üíï`,
      embeds: [buildStartEmbed(username, info)],
    });
  } else if (kind.includes("end")) {
    await ch.send({ embeds: [buildEndEmbed(username, info)] });
  } else {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô event ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ log ‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏Å‡πà‡∏≠‡∏ô
    console.log("‚ÑπÔ∏è ‡∏£‡∏±‡∏ö event ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å:", kind, payload);
  }
}

/* ---------- Webhook endpoint ---------- */
app.post("/webhooks/euler-live", async (req, res) => {
  try {
    if (!verifyEulerSignature(req)) {
      console.warn("‚ùå invalid signature");
      return res.status(401).send("invalid signature");
    }

    const payload = req.body || {};
    // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à console.log(payload) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Euler ‡πÅ‡∏•‡πâ‡∏ß mapping ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    console.log("‚úÖ received:", JSON.stringify(payload));

    await sendToDiscord(payload);
    res.status(200).send("ok");
  } catch (e) {
    console.error("webhook error:", e);
    res.status(500).send("error");
  }
});

app.get("/", (_req, res) => res.send("OK"));
app.listen(PORT, () => console.log(`üåê Webhook server running at :${PORT}`));
