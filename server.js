import "dotenv/config";
import express from "express";
import bodyParser from "body-parser";
import { Client, GatewayIntentBits, EmbedBuilder, Events } from "discord.js";

const {
  PORT = 8080,
  DISCORD_TOKEN,
  CHANNEL_ID,
  EULER_WEBHOOK_SECRET,
} = process.env;

if (!DISCORD_TOKEN || !CHANNEL_ID) {
  console.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà DISCORD_TOKEN ‡πÅ‡∏•‡∏∞ CHANNEL_ID ‡πÉ‡∏ô .env");
  process.exit(1);
}

/* ---------- Discord client ---------- */
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once(Events.ClientReady, (c) => {
  console.log(`ü¶Ä ‡∏õ‡∏π‡πÇ‡∏Å‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${c.user.tag}`);
});

await client.login(DISCORD_TOKEN);

/* ---------- Express app ---------- */
const app = express();

// ‡πÄ‡∏Å‡πá‡∏ö raw body ‡πÄ‡∏û‡∏∑‡πà‡∏≠ verify signature ‡πÑ‡∏î‡πâ
app.use(
  bodyParser.json({
    verify: (req, _res, buf) => {
      req.rawBody = buf;
    },
  })
);

/* ---------- ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ ---------- */
function verifyEulerSignature(req) {
  const sigHeader = req.get("x-euler-signature");
  if (!sigHeader) return false;
  return sigHeader.trim() === EULER_WEBHOOK_SECRET;
}

const clamp = (s, max) => (s ?? "").toString().slice(0, max);

// ‡πÄ‡∏î‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
function detectKind(payload) {
  const k = (
    payload?.event ||
    payload?.type ||
    payload?.status ||
    ""
  ).toLowerCase();
  if (!k) return "";
  if (/(start|live_on|go_live|online|opened)/.test(k)) return "start";
  if (/(end|live_off|offline|closed|stop)/.test(k)) return "end";
  return k;
}

/* ---------- ‡∏ò‡∏µ‡∏°‡∏õ‡∏π‡πÇ‡∏Å‡∏∞: ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ---------- */
const seafoodStartLines = (u) => [
  `ü¶Ä ‡∏õ‡∏π‡πÇ‡∏Å‡∏∞‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü! **@${u}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á LIVE ‡∏≠‡∏¢‡∏π‡πà‡∏à‡πâ‡∏≤~`,
  `ü¶ê ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏ú‡∏≤‡∏•‡∏≠‡∏¢‡∏°‡∏≤‡πÄ‡∏•‡∏¢~ ‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡∏î‡∏π **@${u}** LIVE ‡∏Å‡∏±‡∏ô üåä`,
  `üêö ‡∏´‡∏≠‡∏¢‡πÅ‡∏Ñ‡∏£‡∏á‡∏•‡∏ß‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏î~ **@${u}** ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡πâ‡∏ß!`,
  `ü¶ë ‡∏´‡∏°‡∏∂‡∏Å‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏≠‡∏° ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏à‡∏≠ **@${u}** ‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ`,
  `üç≤ ‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡∏´‡∏°‡πâ‡∏≠‡πÑ‡∏ü‡∏û‡∏£‡πâ‡∏≠‡∏°! **@${u}** ‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤~`,
];

const seafoodEndLines = (u) => [
  `ü¶Ä ‡∏´‡∏°‡πâ‡∏≠‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß~ ‡πÑ‡∏•‡∏ü‡πå‡∏Ç‡∏≠‡∏á **@${u}** ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤`,
  `ü¶ê ‡∏Å‡∏∏‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß~ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏î‡∏π‡πÑ‡∏•‡∏ü‡πå‡∏Ç‡∏≠‡∏á **@${u}**`,
  `üêö ‡∏´‡∏≠‡∏¢‡∏´‡∏°‡∏î‡∏ñ‡∏±‡∏á! ‡πÑ‡∏•‡∏ü‡πå‡∏Ç‡∏≠‡∏á **@${u}** ‡∏õ‡∏¥‡∏î‡πÄ‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞`,
  `ü¶ë ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ï‡∏≤‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢~ **@${u}** ‡∏õ‡∏¥‡∏î‡πÑ‡∏•‡∏ü‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤`,
];

function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/* ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---------- */
function buildStartEmbed(u, info = {}) {
  const title = clamp(info.title || `@${u} ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤~`, 256);
  const cover = info.cover || info.thumbnail || info.image;
  const startAt = info.started_at
    ? Math.floor(new Date(info.started_at).getTime() / 1000)
    : Math.floor(Date.now() / 1000);

  const desc = [
    pick(seafoodStartLines(u)),
    "",
    `‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠: <t:${startAt}:R>`,
  ].join("\n");

  const e = new EmbedBuilder()
    .setColor(0xff7043) // ‡πÇ‡∏ó‡∏ô‡∏™‡πâ‡∏°-‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î
    .setTitle(`üç§ üî¥ LIVE: ${title}`)
    .setURL(`https://www.tiktok.com/@${u}/live`)
    .setDescription(desc)
    .setTimestamp();

  if (cover && /^https?:\/\//i.test(cover)) e.setImage(cover);
  return e;
}

function buildEndEmbed(u, info = {}) {
  const mins = info.duration_minutes ?? info.minutes ?? null;
  let desc = pick(seafoodEndLines(u));
  if (mins != null) desc += `\n‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏•‡∏ü‡πå: **${mins} ‡∏ô‡∏≤‡∏ó‡∏µ** ‚è±Ô∏è`;
  desc += `\n‡πÑ‡∏ß‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏°‡∏≤‡∏ã‡∏î‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡∏ó‡∏∞‡πÄ‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞ üåä`;

  return new EmbedBuilder()
    .setColor(0xffcc80) // ‡πÇ‡∏ó‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡∏∏‡πà‡∏ô
    .setTitle("üç≤ ‚ö´Ô∏è ‡πÑ‡∏•‡∏ü‡πå‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    .setDescription(desc)
    .setTimestamp();
}

/* ---------- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Discord ---------- */
async function sendToDiscord(payload) {
  const ch = await client.channels.fetch(CHANNEL_ID).catch(() => null);
  if (!ch?.isTextBased?.()) {
    console.error("‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: CHANNEL_ID ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text channel");
    return;
  }

  const username =
    (payload?.username || payload?.user || payload?.account || "").replace(
      /^@/,
      ""
    ) || "streamer";

  const kind = detectKind(payload);
  const info = payload?.roomInfo || payload?.live || payload?.data || {};

  if (kind === "start") {
    await ch.send({
      content: `üîî **@${username}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á LIVE ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤~ ü¶Äüåä`,
      embeds: [buildStartEmbed(username, info)],
    });
  } else if (kind === "end") {
    await ch.send({ embeds: [buildEndEmbed(username, info)] });
  } else {
    // ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏Å‡πá‡∏ö log ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ map ‡πÄ‡∏û‡∏¥‡πà‡∏°
    console.log("‚ÑπÔ∏è ‡∏£‡∏±‡∏ö event ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å:", kind, payload);
  }
}

/* ---------- Webhook endpoint ---------- */
app.post("/webhooks/euler-live", async (req, res) => {
  try {
    if (!verifyEulerSignature(req)) {
      console.warn("‚ùå invalid signature");
      return res.status(401).send("invalid signature");
    }

    const payload = req.body || {};
    console.log("‚úÖ received:", JSON.stringify(payload));
    await sendToDiscord(payload);

    res.status(200).send("ok");
  } catch (e) {
    console.error("webhook error:", e);
    res.status(500).send("error");
  }
});

app.get("/", (_req, res) => res.send("OK"));
app.listen(PORT, () => console.log(`üåê Webhook server running at :${PORT}`));
